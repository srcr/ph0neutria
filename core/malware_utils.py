#!/usr/bin/python3

from .config_utils import get_base_config
from .crypto_utils import hash_file
from .file_utils import profile_url_file, clean_up
from .filter_utils import filter_url_list
from .log_utils import get_module_logger
from .plugin_utils import load_plugins
from .viper_utils import upload_to_viper
from .snake_utils import upload_to_snake
from .virus_total import get_urls_for_ip, get_class_for_hash
from threading import Thread


import numpy
import os
import sys


CDIR = os.path.dirname(os.path.realpath(__file__))
ROOTDIR = os.path.abspath(os.path.join(CDIR, os.pardir))
BASECONFIG = get_base_config(ROOTDIR)
LOGGING = get_module_logger(__name__)


def get_malware_urls():
    """Produce a list of malware URLs from daily updated feeds.

    Returns:
    - result: (type: MalwareUrl list) filtered malware URL list.
    """
    url_list = []
    return_list = []

    malware_host_list = get_plugin_malware_hosts()

    if len(malware_host_list) > 0:
        for host_object in malware_host_list:
            host_url_list = get_urls_for_ip(host_object.address, host_object.source)

            if len(host_url_list) > 0:
                return_list.extend(host_url_list)

    malware_url_list = get_plugin_malware_urls()

    if len(malware_url_list) > 0:
        return_list.extend(malware_url_list)

    return filter_url_list(return_list)


def get_plugin_malware_hosts():
    """Produce a list of malware hosts.

    Returns:
    - host_list: (type: MalwareHost list) list of malware hosts.
    """
    host_list = []

    LOGGING.info('Loading malware host plugins...')

    for plugin in load_plugins():
        try:
            if 'malware-host' in plugin.TYPES and plugin.DISABLED == False:
                LOGGING.info('Running plugin: {0}'.format(plugin.NAME))
                plugin_list = plugin.get_malwarehost_list()

                if len(plugin_list) > 0:
                    host_list.extend(plugin_list)

        except Exception as e:
            LOGGING.error('Problem running plugin. Aborting task.')
            LOGGING.exception(sys.exc_info())
            LOGGING.exception(type(e))
            LOGGING.exception(e.args)
            LOGGING.exception(e)

    return host_list


def get_plugin_malware_urls():
    """Produce a list of malware URLs from regularly updated feeds.

    Returns:
    - result: (type: MalwareUrl list) filtered malware URL list.
    """
    url_list = []
    return_list = []

    LOGGING.info('Loading malware URL plugins...')

    for plugin in load_plugins():
        try:
            if 'malware-url' in plugin.TYPES and plugin.DISABLED == False:
                LOGGING.info('Running plugin: {0}'.format(plugin.NAME))
                plugin_list = plugin.get_malwareurl_list()

                if len(plugin_list) > 0:
                    for url_object in plugin_list:
                        if url_object.url not in url_list:
                            return_list.append(url_object)
                            url_list.append(url_object.url)

        except Exception as e:
            LOGGING.error('Problem running plugin. Aborting task.')
            LOGGING.exception(sys.exc_info())
            LOGGING.exception(type(e))
            LOGGING.exception(e.args)
            LOGGING.exception(e)

    return return_list


def process_malware_list(url_list):
    """Fetch and store all malware URLs in a list.

    Params:
    - url_list: (type: MalwareUrl list) malware URL list.
    """
    for mal_url in url_list:
        tmp_file_path = profile_url_file(mal_url.url)

        if not tmp_file_path:
            LOGGING.warning('URL: {0} did not successfully download. Continuing...'.format(mal_url.url))
            continue

        if BASECONFIG.backend.lower() == 'viper':
            try:
                if BASECONFIG.tag_samples:
                    file_hash = hash_file(tmp_file_path)
                    mal_class = get_class_for_hash(file_hash)
    
                    if mal_class:
                        upload_to_viper(mal_url, tmp_file_path, mal_class)

                    else:
                        LOGGING.warning('Failed to classify file. Tag will be generic.')
                        upload_to_viper(mal_url, tmp_file_path)

                else:
                    upload_to_viper(mal_url, tmp_file_path)

            except Exception as e:
                LOGGING.error('Problem preparing submission to Viper. Aborting task.')
                LOGGING.exception(sys.exc_info())
                LOGGING.exception(type(e))
                LOGGING.exception(e.args)
                LOGGING.exception(e)

        if BASECONFIG.backend.lower() == 'snake':
            try:
                if BASECONFIG.tag_samples:
                    file_hash = hash_file(tmp_file_path)
                    mal_class = get_class_for_hash(file_hash)
    
                    if mal_class:
                        upload_to_snake(mal_url, tmp_file_path, mal_class)

                    else:
                        LOGGING.warning('Failed to classify file. Tag will be generic.')
                        upload_to_snake(mal_url, tmp_file_path)

                else:
                    upload_to_snake(mal_url, tmp_file_path)

            except Exception as e:
                LOGGING.error('Problem preparing submission to Viper. Aborting task.')
                LOGGING.exception(sys.exc_info())
                LOGGING.exception(type(e))
                LOGGING.exception(e.args)
                LOGGING.exception(e)

        clean_up(tmp_file_path)


def queue_malware_list(full_list):
    """Partition and process a malware URL list.

    Params:
    - full_list: (type: MalwareUrl list) filtered malware URL list.
    """
    url_lists = numpy.array_split(full_list, BASECONFIG.malware_workers)

    worker_threads = []

    for url_list in url_lists:
        LOGGING.info('Queueing {0} items...'.format(len(url_list)))

        list_thread = Thread(target=process_malware_list, args=[url_list])
        worker_threads.append(list_thread)

    for worker_thread in worker_threads:
        worker_thread.start()

    try:
        LOGGING.info('Spawning {0} ph0neutria spiders. Press CTRL+C to terminate.'.format(BASECONFIG.malware_workers))

        for worker_thread in worker_threads:
            worker_thread.join()

    except KeyboardInterrupt:
        LOGGING.warning('Mother spider received Ctrl+C. Killing babies.')

        for worker_thread in worker_threads:
            worker_thread.terminate()
            worker_thread.join()
